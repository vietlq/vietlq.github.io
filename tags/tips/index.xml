<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Viet&#39;s Blog</title>
    <link>https://vietlq.github.io/tags/tips/</link>
    <description>Recent content in Tips on Viet&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Sep 2019 18:13:03 +0100</lastBuildDate>
    
	<atom:link href="https://vietlq.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Make Grub Font Size Bigger</title>
      <link>https://vietlq.github.io/2019/09/22/make-grub-font-size-bigger/</link>
      <pubDate>Sun, 22 Sep 2019 18:13:03 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2019/09/22/make-grub-font-size-bigger/</guid>
      <description>By default Ubuntu/ElementaryOS configure their GRUB to use very small fonts. That really hurts my eyes. I decided to play with GRUB and increase the font size. The process is rather straight forward:
 Generate a GRUB-compatible font with specified size from a TTF (type-type font) Edit high-level GRUB configuration file Regenerate low-level GRUB configurations Restart and enjoy fruit of your labour  I chose a mono-space font with size 36pt: DejaVuSansMono.</description>
    </item>
    
    <item>
      <title>Endianness Agnostic ntoh</title>
      <link>https://vietlq.github.io/2019/06/22/endianness-agnostic-ntoh/</link>
      <pubDate>Sat, 22 Jun 2019 14:59:34 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2019/06/22/endianness-agnostic-ntoh/</guid>
      <description>From the Endianness detection blog entry, we have learned how to do that using predefined macros across different architectures. Our next task is to write ntoh (network to host) and hton (host to network) functions to convert integers and floating point values between network and host formats. Here&amp;rsquo;s a catch: Do not use conditionals - basically, do not use any of the keywords if/else/for/while. To make it even harder: Do not include any headers and also do not use #if/#else/#endif pre-processors.</description>
    </item>
    
    <item>
      <title>Taming Elementary OS</title>
      <link>https://vietlq.github.io/2019/05/11/taming-elementary-os/</link>
      <pubDate>Sat, 11 May 2019 11:48:06 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2019/05/11/taming-elementary-os/</guid>
      <description>ElementaryOS is a beautiful distro based on Ubuntu. It aims at satisfying Linux users with aesthetics or first time Linux users.
Unlike developers of most Linux distros, ElementaryOS developers are not shy to suggest you to pay for play: Purchase your copy of ElementaryOS. The default price tag is $20, which I was happy to pay. I really love the distro&amp;rsquo;s sleek UI and an option to install free or buy more software at their AppCenter.</description>
    </item>
    
    <item>
      <title>Fix Wifi for Ubuntu on Microsoft Surface</title>
      <link>https://vietlq.github.io/2019/05/11/fix-wifi-for-ubuntu-on-microsoft-surface/</link>
      <pubDate>Sat, 11 May 2019 11:02:07 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2019/05/11/fix-wifi-for-ubuntu-on-microsoft-surface/</guid>
      <description>Random wifi drops There are some pains using Ubuntu on laptops, especially on Microsoft Surface laptop. Wifi settings are not perfect and there are random drops of wifi after 10-15 mins. I did searching and found that one has to do at least 2 things:
 Prevent MAC address randomisation by default (that reduces security)  /etc/NetworkManager/NetworkManager.conf [device] wifi.scan-rand-mac-address=no   Stop automatic power saving for wifi  /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf wifi.</description>
    </item>
    
    <item>
      <title>Endianness Detection the Hard Way</title>
      <link>https://vietlq.github.io/2018/06/17/endianness-detection-the-hard-way/</link>
      <pubDate>Sun, 17 Jun 2018 08:34:57 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2018/06/17/endianness-detection-the-hard-way/</guid>
      <description>Recently I have had a project that involves serialisation (again!). I have written countless serialisers and deserialisers in 8 years of professional experience. As it goes with binary serialisation, you need to worry about Endianness of your machine because you want your code to be portable across multiple architectures. Text serialisations to JSON or mere CSV exempt you from all that headache, but they are too verbose and slow. In this post I will walk you through tricks to detect Endianness.</description>
    </item>
    
    <item>
      <title>OCaml Packaging With Topkg and OPAM</title>
      <link>https://vietlq.github.io/2018/05/28/ocaml-packaging-with-topkg-and-opam/</link>
      <pubDate>Mon, 28 May 2018 15:41:55 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2018/05/28/ocaml-packaging-with-topkg-and-opam/</guid>
      <description>Dependencies First and foremost, you must have OPAM installed. Then you need to install the following packages:
$ opam install topkg topkg-care topkg-jbuilder  Boilerplate Code Given you have your library tested and ready for publishing, you need to add the files ppx_getenv01.opam and pkg/pkg.ml at the top:
The OPAM file (ppx_getenv01.opam):
opam-version: &amp;quot;1.2&amp;quot; name: &amp;quot;ppx_getenv01&amp;quot; maintainer: &amp;quot;Viet Le &amp;lt;XXXX@gmail.com&amp;gt;&amp;quot; authors: &amp;quot;Viet Le &amp;lt;XXXX@gmail.com&amp;gt;&amp;quot; homepage: &amp;quot;https://github.com/vietlq/ppx_getenv01&amp;quot; bug-reports: &amp;quot;https://github.com/vietlq/ppx_getenv01/issues&amp;quot; license: &amp;quot;MIT&amp;quot; dev-repo: &amp;quot;https://github.</description>
    </item>
    
    <item>
      <title>Safer C&#43;&#43; By Handling Function Result</title>
      <link>https://vietlq.github.io/2018/05/12/safer-c---by-handling-function-result/</link>
      <pubDate>Sat, 12 May 2018 18:15:05 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2018/05/12/safer-c---by-handling-function-result/</guid>
      <description>Overview Despite best efforts to train, educate, warn developers to always capture and handle function results, one still can manage to forget and get burned in the process. Let&amp;rsquo;s say you have this piece of code that deals with critical process:
int critical_func() { return 1234; }  It&amp;rsquo;s far too common for folks to use critical_func() in this manner:
int use_critical_func() { critical_func(); return 0; }  The values returned from critical_func() could mean anything: Cannot connect to a service, balance is empty, rocket is faulty, &amp;hellip; Failure to capture and act based on those return values could result in any undefined/undesired behaviour: Memory leak, crash, silent failures, &amp;hellip; Let&amp;rsquo;s see how we can enforce developers to use return value from mission critical functions.</description>
    </item>
    
    <item>
      <title>Edit and Annotate PDF</title>
      <link>https://vietlq.github.io/2018/03/30/edit-and-annotate-pdf/</link>
      <pubDate>Fri, 30 Mar 2018 18:33:42 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2018/03/30/edit-and-annotate-pdf/</guid>
      <description>I was looking for a tool to edit/annotate PDF files so I could complete a form and put my signature in the PDF file. Looks like Adobe has some expensive tool to accomplish that. Luckily for macOS one can use Preview to annonate and embed signatures in PDF files. It&amp;rsquo;s all free but you will need Apple Trackpad for signing. Follow the guides below:
https://www.macworld.co.uk/how-to/mac-software/how-edit-pdfs-on-mac-for-free-3659723/
https://pdf.iskysoft.com/pdf-editor/free-pdf-editor-mac.html
I also found Skim &amp;amp; Foxit Reader as recommended tools:</description>
    </item>
    
    <item>
      <title>Install RabbitMQ on Ubuntu 16.04 LTS</title>
      <link>https://vietlq.github.io/2017/06/04/install-rabbitmq-on-ubuntu-16.04-lts/</link>
      <pubDate>Sun, 04 Jun 2017 21:07:05 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2017/06/04/install-rabbitmq-on-ubuntu-16.04-lts/</guid>
      <description>Enable RabbitMQ application repository:
echo &amp;quot;deb http://www.rabbitmq.com/debian/ testing main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list  Add the verification key for the package:
curl http://www.rabbitmq.com/rabbitmq-signing-key-public.asc | sudo apt-key add -  Update the sources with our new addition from above:
apt-get update  And finally, download and install RabbitMQ:
sudo apt-get install rabbitmq-server  In order to manage the maximum amount of connections upon launch, open up and edit the following configuration file using nano and uncomment the line ulimit:</description>
    </item>
    
    <item>
      <title>Install Golang on Ubuntu 16.04 LTS</title>
      <link>https://vietlq.github.io/2017/06/04/install-golang-on-ubuntu-16.04-lts/</link>
      <pubDate>Sun, 04 Jun 2017 20:55:33 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2017/06/04/install-golang-on-ubuntu-16.04-lts/</guid>
      <description>To install Golang on Ubuntu you will need to add a PPA repo:
sudo add-apt-repository ppa:longsleep/golang-backports sudo apt-get update sudo apt-get install golang-go  It does not give you the latest minor version but tends to give to the latest major version. Golang 1.8.3 is released and as of today I still get 1.8.1 via this PPA repo.</description>
    </item>
    
    <item>
      <title>How to Install a Git Repo &amp; Serve via SSH</title>
      <link>https://vietlq.github.io/2017/06/04/how-to-install-a-git-repo--serve-via-ssh/</link>
      <pubDate>Sun, 04 Jun 2017 11:41:20 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2017/06/04/how-to-install-a-git-repo--serve-via-ssh/</guid>
      <description>Love Git but donâ€™t want to pay GitHub to have a private repo? No problem. Hereâ€™s the solution. I was looking for a way to create a repo and serve it on my server via ssh. Git made it really simple and we can do in 3 steps (copied from the Reference 1):
Steps 1. Create a repo # On the server side mkdir ~/repos/ cd ~/repos/ GIT_DIR=project.git git init cd project.</description>
    </item>
    
    <item>
      <title>Listing all header files your cpp depends on</title>
      <link>https://vietlq.github.io/2017/06/03/listing-all-header-files-your-cpp-depends-on/</link>
      <pubDate>Sat, 03 Jun 2017 18:04:22 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2017/06/03/listing-all-header-files-your-cpp-depends-on/</guid>
      <description>I needed to extract certain Boost headers from its huge code base for memory mapped file &amp;amp; shared memory containers. The first idea came to my mind was a simple grep command for #include statements and then parse the paths. This is simple but not so useful for the cases when headers are conditionally included. For example:
#ifndef NO_STL #include &amp;quot;my_class_no_stl.h&amp;quot; #else #include &amp;quot;my_class_stl.h&amp;quot; #endif  To be honest, grep wonâ€™t be able to handle it.</description>
    </item>
    
    <item>
      <title>Permalinks, Tags, Images, RSS, Sitemap</title>
      <link>https://vietlq.github.io/2017/04/30/permalinks-tags-images-rss-sitemap/</link>
      <pubDate>Sun, 30 Apr 2017 11:52:14 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2017/04/30/permalinks-tags-images-rss-sitemap/</guid>
      <description>From the previous post, you already know how to use a Hugo theme, write a new entry. Now you want to add tags, permalinks and images for better reading experience.
Add Permalinks &amp;amp; Tags By default Hugo does not give you tags, categories and permalinks. This can be quickly remedied by updating your config.toml file:
baseURL = &amp;quot;http://vietlq.github.io/&amp;quot; languageCode = &amp;quot;en-us&amp;quot; title = &amp;quot;Viet&#39;s Blog&amp;quot; theme = &amp;quot;hugo-geo&amp;quot; [permalinks] post = &amp;quot;/:year/:month/:day/:title/&amp;quot; [taxonomies] category = &amp;quot;categories&amp;quot; tag = &amp;quot;tags&amp;quot; [params] # To satisfy hugo-geo theme header = &amp;quot;Viet&#39;s Blog&amp;quot; Author = &amp;quot;Viet Le&amp;quot;  Now add tags = [&amp;quot;go&amp;quot;, &amp;quot;hugo&amp;quot;, &amp;quot;git&amp;quot;, &amp;quot;blog&amp;quot;, &amp;quot;config&amp;quot;, &amp;quot;setup&amp;quot;] to front matter of your entry.</description>
    </item>
    
  </channel>
</rss>