<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;17 on Viet&#39;s Blog</title>
    <link>https://vietlq.github.io/tags/c&#43;&#43;17/</link>
    <description>Recent content in C&#43;&#43;17 on Viet&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 May 2018 18:15:05 +0100</lastBuildDate>
    
	<atom:link href="https://vietlq.github.io/tags/c++17/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Safer C&#43;&#43; By Handling Function Result</title>
      <link>https://vietlq.github.io/2018/05/12/safer-c---by-handling-function-result/</link>
      <pubDate>Sat, 12 May 2018 18:15:05 +0100</pubDate>
      
      <guid>https://vietlq.github.io/2018/05/12/safer-c---by-handling-function-result/</guid>
      <description>Overview Despite best efforts to train, educate, warn developers to always capture and handle function results, one still can manage to forget and get burned in the process. Let&amp;rsquo;s say you have this piece of code that deals with critical process:
int critical_func() { return 1234; }  It&amp;rsquo;s far too common for folks to use critical_func() in this manner:
int use_critical_func() { critical_func(); return 0; }  The values returned from critical_func() could mean anything: Cannot connect to a service, balance is empty, rocket is faulty, &amp;hellip; Failure to capture and act based on those return values could result in any undefined/undesired behaviour: Memory leak, crash, silent failures, &amp;hellip; Let&amp;rsquo;s see how we can enforce developers to use return value from mission critical functions.</description>
    </item>
    
  </channel>
</rss>